{"version":3,"sources":["components/Screen/Screen.module.css","components/BoardControl/BoardControl.module.css","components/Screen/SettingsScreen.tsx","components/Screen/CounterScreen.tsx","components/Screen/Screen.tsx","components/BoardControl/Button.tsx","components/BoardControl/CounterControl.tsx","components/BoardControl/SettingsControl.tsx","components/BoardControl/BoardControl.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SettingsScreen","error","minValue","maxValue","changeMinValue","changeMaxValue","errorClass","s","errorMaxInput","className","screenContainer","settingsScreen","inputContainer","inputSettingsValue","type","value","onChange","e","currentTarget","CounterScreen","isError","screenCounter","Screen","settings","Button","disable","name","changeCallback","buttonContainer","button","disabled","onClick","CounterControl","changeValue","onSettings","resetValue","buttonsContainer","SettingsControl","BoardControl","App","useState","min","Number","localStorage","getItem","startNumber","setMinValue","max","maxNumber","setMaxValue","setValue","setSettings","setError","useEffect","setItem","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38fba7e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screenContainer\":\"Screen_screenContainer__2F-A1\",\"screenCounter\":\"Screen_screenCounter__24viR\",\"inputSettingsValue\":\"Screen_inputSettingsValue__2sApK\",\"inputContainer\":\"Screen_inputContainer__3PmsR\",\"settingsScreen\":\"Screen_settingsScreen__1xWE4\",\"error\":\"Screen_error__TKlG5\",\"errorMaxInput\":\"Screen_errorMaxInput__1i0Pm\",\"errorContainer\":\"Screen_errorContainer__OnLAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"BoardControl_buttonsContainer__1BLt5\",\"button\":\"BoardControl_button__2Zj6m\",\"buttonContainer\":\"BoardControl_buttonContainer__3uXMF\"};","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Screen.module.css\";\r\nimport {ErrorType} from \"../../App\";\r\n\r\ntype SettingsScreenPropsType = {\r\n    error: ErrorType\r\n    minValue: number\r\n    maxValue: number\r\n    changeMinValue: (value: number) => void\r\n    changeMaxValue: (value: number) => void\r\n\r\n}\r\n\r\nexport const SettingsScreen: React.FC<SettingsScreenPropsType> = ({error,minValue, maxValue,\r\n                                                                      changeMinValue,changeMaxValue}) => {\r\nconst updateMin = (e: ChangeEvent<HTMLInputElement>) => {\r\n    changeMinValue(+e.currentTarget.value)\r\n}\r\nconst updateMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n    changeMaxValue(+e.currentTarget.value)\r\n}\r\nconst errorClass = error === 'errorSettings'? s.errorMaxInput  : ''\r\n\r\n    return(\r\n        <div className={s.screenContainer+ ' '+ s.settingsScreen + ' ' + errorClass }>\r\n            <div className={s.inputContainer}>\r\n                max value : <input className={s.inputSettingsValue + ' ' + errorClass}\r\n                                   type='number' value={maxValue} onChange={updateMax}/>\r\n\r\n            </div>\r\n            <div className={s.inputContainer}>\r\n                start value : <input className={s.inputSettingsValue + ' ' + errorClass}\r\n                                     type='number' value={minValue} onChange={updateMin}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Screen.module.css\";\r\nimport {ErrorType} from \"../../App\";\r\n\r\ntype CounterScreenPropsType = {\r\n    error: ErrorType\r\n    value: number\r\n}\r\n\r\nexport const CounterScreen: React.FC<CounterScreenPropsType> = ({error, value}) => {\r\nconst isError = error === 'errorValue' ? s.error:''\r\n    return(\r\n        <div className={s.screenContainer + ' ' + s.screenCounter+' '+isError}>{value}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport {SettingsScreen} from \"./SettingsScreen\";\r\nimport {CounterScreen} from \"./CounterScreen\";\r\nimport {ErrorType} from \"../../App\";\r\n\r\n\r\n\r\ntype ScreenPropsType = {\r\n    error: ErrorType\r\n    settings: boolean\r\n    value: number\r\n    minValue: number\r\n    maxValue: number\r\n    changeMinValue: (value: number) => void\r\n    changeMaxValue: (value: number) => void\r\n}\r\n\r\nexport const Screen: React.FC<ScreenPropsType> = ({error, settings, value,\r\n                                                      minValue, maxValue,\r\n                                                      changeMinValue,changeMaxValue\r\n}) => {\r\n\r\n    return settings\r\n        ? <SettingsScreen error={error} minValue={minValue} maxValue={maxValue}\r\n                          changeMinValue={changeMinValue} changeMaxValue={changeMaxValue}/>\r\n        : <CounterScreen error={error} value={value}/>\r\n}","import React from 'react'\r\nimport s from './BoardControl.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    disable: boolean\r\n    name: string\r\n\r\n    changeCallback: () => void\r\n\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({disable,name,changeCallback}) => {\r\n\r\n    return (\r\n        <div className={s.buttonContainer}>\r\n            <button className={s.button} disabled={disable} onClick={()=>changeCallback()}>{name}</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./BoardControl.module.css\";\r\nimport {Button} from \"./Button\";\r\nimport {ErrorType} from \"../../App\";\r\n\r\ntype CounterControlPropsType = {\r\n    error: ErrorType\r\n    changeValue: () => void\r\n    resetValue: () => void\r\n    onSettings: () => void\r\n}\r\n\r\nexport const CounterControl: React.FC<CounterControlPropsType> = ({error, changeValue, onSettings, resetValue}) => {\r\n\r\n    return (\r\n        <div className={s.buttonsContainer}>\r\n            <Button disable={error === 'errorValue'} name={'inc'} changeCallback={changeValue}/>\r\n            <Button disable={false} name={'reset'} changeCallback={resetValue}/>\r\n            <Button disable={false} name={'set'} changeCallback={onSettings}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport s from \"./BoardControl.module.css\";\r\nimport {Button} from \"./Button\";\r\nimport {ErrorType} from \"../../App\";\r\n\r\n\r\ntype SettingsControlPropsType = {\r\n    error: ErrorType\r\n    onSettings: () => void\r\n}\r\n\r\nexport const SettingsControl: React.FC<SettingsControlPropsType> = ({error,onSettings}) => {\r\n\r\n\r\n    return (\r\n        <div className={s.buttonsContainer}>\r\n            <Button disable={error === 'errorSettings'} name={'set'} changeCallback={onSettings}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {CounterControl} from \"./CounterControl\";\r\nimport {SettingsControl} from \"./SettingsControl\";\r\nimport {ErrorType} from \"../../App\";\r\n\r\n\r\n\r\ntype BoardControlPropsType = {\r\n    error: ErrorType\r\n    settings: boolean\r\n    changeValue: () => void\r\n    resetValue: () => void\r\n    onSettings: () => void\r\n}\r\n\r\nexport const BoardControl: React.FC<BoardControlPropsType> = ({error, settings, changeValue, onSettings, resetValue}) => {\r\n\r\n    return settings\r\n        ? <SettingsControl error={error} onSettings={onSettings}/>\r\n        : <CounterControl error={error} changeValue={changeValue}\r\n                          onSettings={onSettings} resetValue={resetValue}/>\r\n\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Screen} from \"./components/Screen/Screen\";\nimport {BoardControl} from \"./components/BoardControl/BoardControl\";\n\nexport type ErrorType = '' | 'errorValue' | 'errorSettings'\n\nfunction App() {\n\n    const startNumber = (): number => {\n        const min = Number(localStorage.getItem('minValue'))\n        return min ? min : 0\n    }\n    const maxNumber = (): number => {\n        const max = Number(localStorage.getItem('maxValue'))\n        return max ? max : 5\n    }\n\n\n    const [minValue, setMinValue] = useState<number>(startNumber())\n    const [maxValue, setMaxValue] = useState<number>(maxNumber())\n    const [value, setValue] = useState(minValue)\n    const [settings, setSettings] = useState(false)\n    const [error, setError] = useState<ErrorType>('')\n\n\n    useEffect(() => {\n        if (!settings && minValue > value) {\n            setValue(minValue)\n        } else if (!settings && maxValue < value) {\n            setError('errorValue')\n        } else if (settings && error !== '') {\n            setError('')\n        }\n    }, [settings])\n    useEffect(() => {\n        localStorage.setItem('minValue', JSON.stringify(minValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n\n    }, [minValue, maxValue])\n\n    const changeCounterValue = () => {\n        value >= maxValue ? setError('errorValue') : setValue(value + 1)\n    }\n    const onSettings = () => {\n        setSettings(!settings)\n\n    }\n\n    const resetValue = () => {\n        setValue(minValue)\n        setError('')\n    }\n\n    const changeMinValue = (minValue: number) => {\n        if ((minValue <= maxValue && error === 'errorSettings')) {\n            setError('')\n            setMinValue(minValue)\n        } else if ((minValue <= maxValue && error === '')) {\n            setMinValue(minValue)\n        } else {\n            setError('errorSettings')\n\n        }\n    }\n    const changeMaxValue = (maxValue: number) => {\n        if ((maxValue >= minValue && error === 'errorSettings')) {\n            setError('')\n            setMaxValue(maxValue)\n        } else if ((maxValue >= minValue && error === '')) {\n            setMaxValue(maxValue)\n        } else {\n            setError('errorSettings')\n        }\n\n    }\n\n    return (\n        <div className=\"App-Container\">\n\n            <Screen error={error} settings={settings} value={value}\n                    minValue={minValue} maxValue={maxValue}\n                    changeMinValue={changeMinValue} changeMaxValue={changeMaxValue}/>\n\n            <BoardControl error={error} settings={settings} changeValue={changeCounterValue}\n                          onSettings={onSettings} resetValue={resetValue}/>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}