{"version":3,"sources":["components/general/Button.module.css","redux/action.ts","components/general/Button.tsx","components/Counter/Counter.tsx","components/SettingCounter/SettingCounter.tsx","redux/selectors.ts","App.tsx","reportWebVitals.ts","redux/counter-reducer.ts","redux/store.ts","utility/localStorage.ts","index.tsx","components/SettingCounter/SettingCounter.module.css","components/Counter/Counter.module.css"],"names":["module","exports","ActionsType","Button","React","memo","disable","name","buttonName","changeCallback","className","s","button","disabled","data-button_name","onClick","e","currentTarget","dataset","button_name","onChangeCallback","Counter","value","error","style","counterScreen","counterValueError","SettingCounter","minValue","maxValue","changeSettingsValue","onChangeSettingsValue","Number","input_name","settingsValueError","inputContainer","type","data-input_name","onChange","input","placeholder","selectValue","state","counter","selectSettings","settings","selectSettingsValue","settingsValue","selectError","changeSettings","CHANGE_SETTINGS","App","useSelector","dispatch","useDispatch","CHANGE_VALUE","RESET_VALUE","inputName","CHANGE_SETTING_MIN_VALUE","changeSettingMinValue","CHANGE_SETTING_MAX_VALUE","changeSettingMaxValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","newValue","CHANGE_ERROR","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadSettingsValue","subscribe","stringify","setItem","saveSettingsValue","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e22a2f4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__Kb3O1\"};","import {ErrorType} from \"./counter-reducer\";\r\n\r\nexport  enum ActionsType {\r\n    CHANGE_VALUE = 'CHANGE-VALUE',\r\n    RESET_VALUE = 'RESET-VALUE',\r\n    CHANGE_SETTING_MIN_VALUE = 'CHANGE-SETTING-MIN-VALUE',\r\n    CHANGE_SETTING_MAX_VALUE = 'CHANGE-SETTING-MAX-VALUE',\r\n    CHANGE_SETTINGS = 'CHANGE-SETTINGS',\r\n    CHANGE_ERROR = 'CHANGE_ERROR',\r\n}\r\n\r\n\r\nexport const changeValue = () => ({type: ActionsType.CHANGE_VALUE} as const)\r\nexport type ChangeValueType = ReturnType<typeof changeValue>\r\n\r\nexport const resetValue = () => ({type: ActionsType.RESET_VALUE} as const)\r\nexport type ResetValueType = ReturnType<typeof resetValue>\r\n\r\nexport const changeSettingMinValue = (value: number) => ({\r\n    type: ActionsType.CHANGE_SETTING_MIN_VALUE,\r\n    value\r\n} as const)\r\nexport type ChangeSettingMinValueType = ReturnType<typeof changeSettingMinValue>\r\n\r\nexport const changeSettingMaxValue = (value: number) => ({\r\n    type: ActionsType.CHANGE_SETTING_MAX_VALUE,\r\n    value\r\n} as const)\r\nexport type ChangeSettingMaxValueType = ReturnType<typeof changeSettingMaxValue>\r\n\r\nexport const changeSettings = (settings: boolean) => ({\r\n    type: ActionsType.CHANGE_SETTINGS,\r\n    settings\r\n} as const)\r\nexport type ChangeSettings = ReturnType<typeof changeSettings>\r\n\r\nexport const changeError = (error: ErrorType) => ({\r\n    type: ActionsType.CHANGE_ERROR,\r\n    error\r\n} as const)\r\nexport type ChangeError = ReturnType<typeof changeError>\r\n","import React from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    disable: boolean\r\n    name: string\r\n    buttonName: string\r\n    changeCallback: (buttonName: string | undefined) => void\r\n\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo(({disable, name, buttonName, changeCallback}) => {\r\n\r\n    const onChangeCallback = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        changeCallback(e.currentTarget.dataset.button_name)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={s.button} disabled={disable} data-button_name={buttonName}\r\n                    onClick={(e) => onChangeCallback(e)}>{name}</button>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport style from './Counter.module.css'\r\nimport {Button} from \"../general/Button\";\r\nimport {ErrorType} from \"../../redux/counter-reducer\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    value: number\r\n    error: ErrorType\r\n    changeCallback: (buttonName: string | undefined) => void\r\n}\r\n\r\n\r\nexport const Counter: React.FC<CounterPropsType> = React.memo(({value, error, changeCallback}) => {\r\n    return (\r\n        <div className={'Counter-Container'}>\r\n            <div\r\n                className={`screen-group ${style.counterScreen} ${error === 'errorValue' ? style.counterValueError : ''}`}>\r\n                {value}\r\n            </div>\r\n            <div className={'buttons-group'}>\r\n                <Button name={'inc'} disable={error === 'errorValue'} buttonName='inc' changeCallback={changeCallback}/>\r\n                <Button name={'reset'} disable={false} buttonName='reset' changeCallback={changeCallback}/>\r\n                <Button name={'set'} disable={false} buttonName='setTrue' changeCallback={changeCallback}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent} from \"react\";\r\nimport style from './SettingCounter.module.css'\r\nimport {Button} from \"../general/Button\";\r\nimport {ErrorType} from \"../../redux/counter-reducer\";\r\n\r\n\r\ntype SettingCounterPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    error: ErrorType\r\n    changeSettingsValue: (value: number, inputName: string | undefined) => void\r\n    changeCallback: (buttonName: string | undefined) => void\r\n}\r\nexport const SettingCounter: React.FC<SettingCounterPropsType> = React.memo(({\r\n                                                                                 minValue, maxValue, error,\r\n                                                                                 changeSettingsValue, changeCallback\r\n                                                                             }) => {\r\n\r\n    const onChangeSettingsValue = (e: ChangeEvent<HTMLInputElement>) =>\r\n        changeSettingsValue(Number(e.currentTarget.value), e.currentTarget.dataset.input_name)\r\n\r\n    return (\r\n        <div className={'Counter-Container'}>\r\n            <div className={`screen-group ${style.counterScreen} ${error ? style.settingsValueError : ''}`}>\r\n                <div className={style.inputContainer}>\r\n                    <span>starting value:</span>\r\n                    <input value={minValue} type={'number'} data-input_name='min value'\r\n                           onChange={(e) => onChangeSettingsValue(e)}\r\n                           className={style.input}/>\r\n                </div>\r\n                <div className={style.inputContainer}>\r\n                    <span>finish value:</span>\r\n                    <input value={maxValue} type={'number'} placeholder={'step 1'}\r\n                           data-input_name='max value'\r\n                           onChange={(e) => onChangeSettingsValue(e)}\r\n                           className={style.input}/>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={'buttons-group'}>\r\n                <Button name={'set'} changeCallback={changeCallback} buttonName='setFalse' disable={false}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import {AppStateType} from \"./store\";\r\n\r\nexport const selectValue= (state: AppStateType) => state.counter.value\r\nexport const selectSettings = (state: AppStateType) => state.counter.settings\r\nexport const selectSettingsValue = (state: AppStateType) => state.counter.settingsValue\r\nexport const selectError = (state: AppStateType) => state.counter.error\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Counter} from \"./components/Counter/Counter\";\r\nimport {SettingCounter} from \"./components/SettingCounter/SettingCounter\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectError, selectSettings, selectSettingsValue, selectValue} from \"./redux/selectors\";\r\nimport {changeSettingMaxValue, changeSettingMinValue, changeSettings, changeValue, resetValue} from \"./redux/action\";\r\nimport {store} from \"./redux/store\";\r\nimport {ErrorType, SettingsValueType} from \"./redux/counter-reducer\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const value: number = useSelector(selectValue)\r\n\r\n    const settings: boolean = useSelector(selectSettings)\r\n    const error: ErrorType = useSelector(selectError)\r\n    const {minValue, maxValue}: SettingsValueType = useSelector(selectSettingsValue)\r\n\r\n    const dispatch = useDispatch<typeof store.dispatch>()\r\n\r\n\r\n    const changeSettingsValue = (value: number, inputName: string | undefined) => {\r\n\r\n        if (inputName === 'min value') {\r\n            dispatch(changeSettingMinValue(value))\r\n        } else if (inputName === 'max value') {\r\n            dispatch(changeSettingMaxValue(value))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const changeCallback = (buttonName: string | undefined) => {\r\n\r\n        switch (buttonName) {\r\n            case 'inc':\r\n\r\n                return dispatch(changeValue())\r\n            case 'reset':\r\n                return dispatch(resetValue())\r\n            case 'setTrue':\r\n                return dispatch(changeSettings(true))\r\n            case 'setFalse':\r\n                return dispatch(changeSettings(false))\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!settings ? <Counter value={value} changeCallback={changeCallback}\r\n                                  error={error}/>\r\n                : <SettingCounter minValue={minValue} maxValue={maxValue} error={error}\r\n                                  changeSettingsValue={changeSettingsValue} changeCallback={changeCallback}\r\n\r\n                />}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n    ActionsType,\r\n    ChangeError,\r\n    ChangeSettingMaxValueType,\r\n    ChangeSettingMinValueType,\r\n    ChangeSettings,\r\n    ChangeValueType,\r\n    ResetValueType\r\n} from \"./action\";\r\n\r\nexport type SettingsValueType = {\r\n    minValue: number\r\n    maxValue: number\r\n}\r\nexport type ErrorType = '' | 'errorValue' | 'errorSettings'\r\n\r\nconst initialState = {\r\n\r\n    value: 0,\r\n    settingsValue: {\r\n        minValue: 0,\r\n        maxValue: 5,\r\n    } as SettingsValueType,\r\n    settings: true,\r\n    error: '' as ErrorType,\r\n\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ActionType = ChangeValueType\r\n    | ResetValueType\r\n    | ChangeSettingMinValueType\r\n    | ChangeSettingMaxValueType\r\n    | ChangeSettings\r\n    | ChangeError\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ActionsType.CHANGE_VALUE:\r\n\r\n            const newValue = state.value + 1\r\n            if (newValue > state.settingsValue.maxValue) {\r\n                return {\r\n                    ...state,\r\n                    value: state.settingsValue.maxValue,\r\n                    error: \"errorValue\",\r\n                }\r\n            } else return {\r\n                ...state,\r\n                value: newValue,\r\n            }\r\n        case ActionsType.RESET_VALUE:\r\n            return {\r\n                ...state,\r\n                value: state.settingsValue.minValue,\r\n                error: '',\r\n            }\r\n\r\n        case ActionsType.CHANGE_SETTING_MIN_VALUE:\r\n            if (action.value > state.settingsValue.maxValue) {\r\n                return {\r\n\r\n                    ...state,\r\n                    settingsValue: {\r\n                        ...state.settingsValue,\r\n                        minValue: state.settingsValue.maxValue\r\n                    },\r\n                    error: 'errorSettings',\r\n                }\r\n            } else if (state.value < state.settingsValue.minValue) {\r\n                return {\r\n                    ...state,\r\n                    value: action.value,\r\n                    settingsValue: {\r\n                        ...state.settingsValue,\r\n                        minValue: action.value,\r\n                    },\r\n                    error: '',\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    settingsValue: {\r\n                        ...state.settingsValue,\r\n                        minValue: action.value,\r\n                    },\r\n                    error: '',\r\n                }\r\n            }\r\n\r\n        case ActionsType.CHANGE_SETTING_MAX_VALUE:\r\n            if (action.value < state.settingsValue.minValue) {\r\n                return {\r\n                    ...state,\r\n                    settingsValue: {\r\n                        ...state.settingsValue,\r\n                        maxValue: state.settingsValue.minValue,\r\n                    },\r\n                    error: 'errorSettings',\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    settingsValue: {\r\n                        ...state.settingsValue,\r\n                        maxValue: action.value,\r\n                    },\r\n                    error: '',\r\n\r\n                }\r\n            }\r\n        case ActionsType.CHANGE_SETTINGS:\r\n            if (state.settings) {\r\n                let newValue\r\n                if(state.value < state.settingsValue.minValue) {\r\n                    newValue = state.settingsValue.minValue\r\n                }else if (state.value > state.settingsValue.maxValue) {\r\n                    newValue = state.settingsValue.maxValue\r\n                }else {\r\n                    newValue = state.value\r\n                }\r\n                return {\r\n                    ...state,\r\n                    value: newValue,\r\n                    settings: action.settings,\r\n                    error: '',\r\n                }\r\n\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    settings: action.settings,\r\n                    error: '',\r\n                }\r\n            }\r\n        case ActionsType.CHANGE_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {ActionType, counterReducer, InitialStateType} from \"./counter-reducer\";\r\nimport {CombinedState, combineReducers, createStore, Reducer} from \"redux\";\r\nimport {loadSettingsValue, saveSettingsValue} from \"../utility/localStorage\";\r\n\r\n\r\n\r\nconst rootReducer: Reducer<CombinedState<{ counter: InitialStateType; }>, ActionType> = combineReducers({\r\n    counter: counterReducer,\r\n})\r\n// const persistedState = loadSettingsValue()\r\n\r\nexport const store = createStore(rootReducer, loadSettingsValue())\r\n\r\nstore.subscribe(() => {\r\n\r\n    saveSettingsValue({\r\n        counter: store.getState().counter\r\n    });\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n","import {AppStateType} from \"../redux/store\";\r\n\r\n\r\nexport const loadSettingsValue = () => {\r\n\r\n    try {\r\n        const serializedState = localStorage.getItem('counter');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveSettingsValue = (counter: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(counter);\r\n        localStorage.setItem('counter', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterScreen\":\"SettingCounter_counterScreen__1KS1Y\",\"input\":\"SettingCounter_input__3ts_L\",\"inputContainer\":\"SettingCounter_inputContainer__3M37I\",\"settingsValueError\":\"SettingCounter_settingsValueError__3vHMS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterScreen\":\"Counter_counterScreen__um6-P\",\"counterValueError\":\"Counter_counterValueError__1iYZp\"};"],"sourceRoot":""}